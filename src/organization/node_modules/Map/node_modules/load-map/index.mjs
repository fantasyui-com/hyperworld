
import util from 'util';
import fs from 'fs';
import path from 'path';
import uuidv4 from 'uuid/v4.js';
import convert from 'xml-js';
//import traverse from 'traverse';
import startCase from 'lodash/startCase.js';
import kebabCase from 'lodash/kebabCase.js';

export default async function(setup){

  const options = {};

  Object.assign(options, setup);

  const readXml = function(xml){
    return new Promise(function(resolve, reject){
      const options = {ignoreComment: true, alwaysChildren: true};
      const result = convert.xml2js(xml, options);
      resolve(result);
    });
  }

  console.log(options)
  const xmlStr = (await fs.promises.readFile(options.xmlFile)).toString();
  const xmlRoot = await readXml(xmlStr);
  //console.log(util.inspect(root, false, null))
  let classInstance;
  let root = classInstance;

  const recurse = async function(object, node){
    //console.log('recurse',node)
    if(node.type == 'element'){
      if(node.elements.length > 0){
        for(const element of node.elements){

          const {name:className, type, attributes, elements} = element;

          const label = attributes.label || uuidv4();
          const id = attributes.id || uuidv4();
          const name = attributes.name || kebabCase(label);

          const classPath = startCase(className);
          const ClassModule = (await import(classPath)).default;
          const classInstance = new ClassModule();
          classInstance.id = id;
          classInstance.name = name;
          classInstance.label = label;

          //classInstance.setData(attributes);
          classInstance.root = root;

          object.addElement(classInstance);
          await recurse(classInstance, element);


        } // for
      }
    }

  } // recurse


  for(const element of xmlRoot.elements){
    //console.log(element);
    const {name:className, attributes, elements} = element;

    const label = attributes.label || uuidv4();
    const id = attributes.id || uuidv4();
    const name = attributes.name || kebabCase(label);

    const classPath = `Location`;
    const ClassModule = (await import(classPath)).default;

    classInstance = new ClassModule();
    classInstance.id = id;
    classInstance.name = name;
    classInstance.label = label;

    //classInstance.setData(attributes);
    classInstance.root = classInstance

    await recurse(classInstance, element);
  }

  options.attachTo.addElement(classInstance);


}
