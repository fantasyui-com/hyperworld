import registry from 'registry';

export default class Machine {

  aliases = ['use', 'machine'];

  constructor(){

  }

  async initialize(){

  }

  match({session, text, command, argument}){
    const response = this.aliases.some(alias=>{
      if( command[0] == alias ){
        return true;
      }
    })
    return response;
  }

  async execute({ session, text, command, argument }){

    const screen = session.user.screen;
    const avatar = session.user.avatar;
    const location = session.user.avatar.location;

    // await screen.warning(`Your avatar has entered a location called "${location.label}"`);
    // const locations = location.getElements().map(i=>i.label);
    // const origin = location.parent.label;

  try{
    // const selectresponse = await screen.select({name: 'value', message:'How are you today?', choices:[
    //   {name:'I feel great!', value:'true'},
    //   {name:'I don\'t feel so good.', value:'false'},
    // ]})
    // const inputResponse = await screen.input({name: 'value', message:'Say something!', initial:"Hola!"})

    const selectresponse = await screen.select({
      name: 'feelings',
      message:'How are you today?',
      choices:[
        {name:'I feel great!', value:'human-is-nominal'},
        {name:'I don\'t feel so good.', value:'human-is-very-sick'},
      ]
    });
    
    const inputResponse = await screen.input({name: 'value', message:'Say something!', initial:"Hola!"})

    await screen.info(`You said "${JSON.stringify(inputResponse)}" and chose "${JSON.stringify(selectresponse)}"`);


  }catch(e){

    // await screen.error(`Conversation timed out.`);
    console.error(e);

  }

  }

}
