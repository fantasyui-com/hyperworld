import registry from 'registry';

export default class Json {

  #session = null;

  constructor(session){
    this.#session = session;
  }

  async prompt(){
    const avatar = this.#session.user.avatar;
    const username = this.#session.username;
    const response = {
      format: 'prompt',
      type: 'input',
      name: 'text',
      message: username,
    };
    this.#session.socket.emit('screen', response)
    return response;
  }

  async data(data){
    this.#session.socket.emit('screen', Object.assign(data,{format: 'data'}))
    return data;
  }

  async print(data){
    const username = this.#session.username;
    const avatar = this.#session.user.avatar;
    const response = Object.assign({username, format:'print'},data);
    this.#session.socket.emit('screen', response)
    return response;
  }

  async input({message,initial}){

    const packet = {
      format: 'input',
      type: 'info',
      message,
      initial
    };

    // return a promise
    return new Promise((resolve,reject)=>{
      this.#session.socket.emit('screen', packet, function(response){
        resolve(response);
      });
      setTimeout(()=>reject('Requeset timed out.'), 5000)
    })

  }

  async select({message, choices}){
    const response = {
      format: 'select',
      name: 'value',
      message: message,
      choices,
    };
    this.#session.socket.emit('screen', response)
    return response;
  }

}
