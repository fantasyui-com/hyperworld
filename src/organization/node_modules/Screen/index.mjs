import registry from 'registry';

import startCase from 'lodash/startCase.js';

// NOTE: REMOVE THIS v, only used for parsing of syntax errors
import Json from './Printer/Json.mjs';
import Enquirer from './Printer/Enquirer.mjs';
// NOTE: REMOVE THIS ^, only used for parsing of syntax errors

export default class Screen {

  #session = null;
  #printer = null;

  constructor(session){
    this.#session = session;
  }

  async initialize(){

    try{
      const printerPath = `./Printer/${startCase(registry.screenPrinter)}.mjs`;
      const PrintModule = (await import(printerPath)).default;
      this.#printer = new PrintModule(this.#session);
    }catch(e){
      console.error(`Sigh, another error in Print Module.`);
      console.error(e);
    }

  }



  /*
    SCREEN INTERACTION

  */

  // data(data) - You can send data
  async data(data){
    return await this.#printer.data(data);
  }

  // info(text) - Info
  async info(text){
    const data = {type:'alert', kind:'info', text};
    return await this.#printer.print(data);
  }

  // warning(text) - Warning
  async warning(text){
    const data = {type:'alert', kind:'warning', text};
    return await this.#printer.print(data);
  }

  // danger(text) - Danger
  async danger(text){
    const data = {type:'alert', kind:'danger', text};
    return await this.#printer.print(data);
  }

  // error(text) - Error
  async error(text){
    const data = {type:'alert', kind:'danger', text};
    return await this.#printer.print(data);
  }

  // input(data) - Ask for text input
  async input(data){
    return await this.#printer.input(data);
  }

  // select(data) - Ask to select something
  async select(data){
    return await this.#printer.select(data);
  }

  // prompt(data) - print a prompt, especially in a terminal
  async prompt(data){
    return await this.#printer.prompt(data);
  }

}
